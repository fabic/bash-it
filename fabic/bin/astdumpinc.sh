#!/bin/sh
#
# FABIC 2014-2017

bindir="$( cd `dirname "$0"` )"

clang_extra_args=()

astdump_sh="`type -p astdump.sh`"
if [ -z "$astdump_sh" ]; then
  # Else search along side _this_ script.
  if [ -x "$bindir/astdump.sh" ]; then
    astdump_sh="$bindir/astdump.sh"
  fi
fi

if [ $# -lt 1 ]; then
  this="`basename "$0"`"
  echo "+-- USAGE --"
  echo "|"
  echo "| $ $this [<header_file.hpp> ...]* [<include/ dir.> ...]*"
  echo "|"
  echo "| Produces a temporary .hpp file that contains #include <> directives"
  echo "| for inclusion of all the header files found."
  echo "|"
  echo "| The astdump.sh script is then invoked."
  echo "|"
  echo "| Note that directories will have a -I<dir> compiler argument emitted."
  echo "|"
  echo "| Examples:"
  echo "|"
  echo "|   $ $this include/ vendor/foo/include/ lib/bar/include/"
  echo "|"
  echo "|"
  exit 1
fi

# We'll write to a temporary file, instead of piping the output
# to Clang (through astdump.sh).
tempfile="`mktemp inc-test-XXXXXX.hpp`"

# Can't be -_-
if [ ! -w "$tempfile" ]; then
  echo
  echo "ERROR: Can't write to temporary file '$tempfile'"
  echo
  exit 1
fi

if true; then
  # Absurd sugar
  cat <<EOF >> "$tempfile"
/** $PWD/$tempfile
 *
 * This was generated by "`basename "$0"` :"
 *
 *   \$ $0 $@
 *
 * On `date`
 * at `hostname -f`
 * by `whoami`
 */
EOF
fi

while [ $# -gt 0 ];
do
  arg="$1"
  shift

  # "--" separator: remaining arguments will be for astdump_sh/Clang.
  if [ "$arg" == "--" ]; then
    break
  # Directories get added as -Idir,
  # and we ch.dir. so as to search for header files.
  elif [ -d "$arg" ]; then
    clang_extra_args=( "${clang_extra_args[@]}" -I"$arg" )
    ( cd "$arg" &&
      find -type f -not -name "$tempfile" -regextype egrep \
        -iregex ".*\.(h|hh|hxx|hpp)" \
          | sed -e 's@^\./\(.\+\)$@#include "\1"@'
    ) >> "$tempfile"
  # Individual include files are #include-d
  else
    ( echo
      echo "#include \"$arg\""
    ) >> "$tempfile"
  fi
done
  # | tee "$tempfile"
  # ^ not doing so either: piping seems to shadow the clang_extra_args
  #   variable in some way.

  # | astdump.sh "${clang_extra_args[@]}" -x c++ -c - -- noautoinc
  #
  # ^ Couldn't pipe directly to Clang, because parameter expansion of
  #   ${clang_extra_args[@]} occurs _before_ the above loop ends
  #   (seamingly due to the fact that we pipe the while loop output
  #   or something), and we won't get the additional `-I...` arguments.
  # ^ Hence we're writing to a temporary file.

cat <<EOF >> "$tempfile"
// EOF
EOF

echo "+- File '$tempfile' :"
echo "|"
cat "$tempfile" \
  | sed -e "s@^@| @"
echo "+-"

retv=127
cmd=()

if [ -n "$astdump_sh" ]; then
  cmd=( "$astdump_sh" "${clang_extra_args[@]}" -c "$tempfile" -- $@ )
  echo "+- Running:"
  echo "| ${cmd[@]}"
  echo "+-"
  echo
  "${cmd[@]}"
  retv=$?
else
  echo
  echo "+- Fallback: Invoking Clang directely (no astdump.sh script?)"
  cmd=( clang++ -std=c++1z -fsyntax-only
    "${clang_extra_args[@]}" "$@"
    -x c++ -c "$tempfile" )
  echo "+- Running:"
  echo "| ${cmd[@]}"
  echo "+-"
  echo
  "${cmd[@]}"
  retv=$?
fi

# If bad exit.
if [ $retv -gt 0 ]; then
  echo -e "\e[97m+~~> Non-zero exit status: $retv\e[0m"
  echo -e "| Command was:"
  echo -e "|   ${cmd[@]}"
  echo -e "+--"
else
  echo -e "\e[97m+~~> Success (!)\e[0m"
  echo -e "| Command was:"
  echo -e "|   ${cmd[@]}"
  echo -e "+--"
fi

if true; then
  rm "$tempfile" &&
    echo -e "+- Removed temporary file '$tempfile'."
fi

exit $retv
